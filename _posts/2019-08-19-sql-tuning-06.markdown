---
layout: post
title:  "2.3 인덱스 확장기능 사용법"
date:   2019-08-20
categories: SQL튜닝
---  
## 2.3.1 Index Range Scan
---
인덱스 루트에서 리프 블록까지 수직적으로 탐색한 후에 '필요한 범위(Range)'만 스캔한다.  
<br>
<br>
<br>
## 2.3.2 Index Full Scan
---
수직적 탐색 없이 인덱스 리프 블록을 처음부터 끝까지 수평적으로 탐색하는 방식이다.  
Index Full Scan은 대개 데이터 검색을 위한 최적의 인덱스가 없을 때 차선으로 선택된다.  
Table Full Scan보다 I/O를 줄일 수 있거나 정렬된 결과를 쉽게 얻을 수 있다면, Index Full Scan을 사용한다.
인덱스가 차지하는 면적은 테이블보다 훨씬 적다. 테이블의 일부만 액세스하는 상황이라면 Table Full Scan보다 Index Full Scan이 유리하다.    
<br>
<br>
<br>
## 2.3.2 Index Unique Scan
---
수직적 탐색만으로 데이터를 찾는 스캔 방식으로써, Unique 인덱스를 '=' 조건으로 탐색하는 경우에 작동한다.  
Unique 인덱스가 존재하는 컬럼은 중복 값이 입력되지 않게 DBMS가 데이터 정합성을 관리해주기 때문에 해당 인덱스 키 컬럼을 '='조건으로 검색할 때는 데이터를 한 건 찾는 순간 더 이상 탐색할 필요가 없다. 단, Unique 인덱스라고 해도 Index Range Scan으로 처리되는 경우가 있는데 범위검색 조건(between, 부등호, like)으로 검색하거나 Unique 결합 인덱스에서 일부 컬럼만으로 검색할 경우가 그렇다. 
<br>
<br>
<br>
## 2.3.4 Index Skip Scan 
---
인덱스 선두 컬럼을 조건절에서 사용하지 않으면 옵티마이저는 기본적을 Table Full Scan을 선택한다.
오라클은 인덱스 선두 컬럼이 조건절에 없어도 인덱스를 활용하는 새로운 스캔방식을 9i 버전에서 선보였는데, Index Skip Scan이 바로 그것이다.  
이 스캔방식은 조건절에 빠진 인덱스 선두 컬럼의 Distinct Value(ex. 성별:남,여) 개수가 적고 후행 컬럼의 Distinct Value(ex. 고객번호:0001,0002,0003,...1359) 개수가 많을 때 유용하다.  
Index Skip Scan은 루트 또는 브랜치 블록에서 읽은 컬럼 값 정보를 이용해 조건절에 부합하는 레코드를 포함할 '가능성이 있는' 리프 블록만 골라서 액세스하는 스캔방식이다.  
But.. 인덱스 선두 컬럼이 없을때만 작동하는것은 아니고 선두컬럼에 대한 조건절은 있고 중간컬럼에 대한 조건절이 없는 경우 등 몇가지 경우가 있다.  
<br>
<br>
<br>
## 2.3.5 Index Fast Full Scan
---
Index Fast Full Scan은 Index Full Scan보다 빠르다.  
논리적인 인덱스 트리 구조를 무시하고 인덱스 세그먼트 전체를 Multiblock I/O 방식으로 스캔하기 때문에 대량의 인덱스 블록을 읽어야 할 때 큰 효과를 발휘.  
그러나 리스트 구조를 무시한 채 디스크를 데이터를 읽기때문에 결과집합이 인덱스 키 순서대로 정렬되지 않음.  
또한 쿼리에 사용한 컬럼이 모두 인덱스에 포함되어있을때만 사용할 수 있다. 
<br>
<br>
<br>
## 2.3.6 Index Range Scan Descending
---
Index Range Scan과 기본적으로 동일한 스캔방식.  
인덱스를 뒤에서부터 앞쪽으로 스캔하기 때문에 내림차순으로 정렬된 결과집합을 얻는다.
<br>
<br>
<br>
<br>
![img01]({{ site.baseurl }}/images/post/sqlTuning/book/bookCover.PNG)<br>
<br>
본 포스팅은 친절한 SQL 튜닝 온라인 스터디를 진행하면서 공부한 내용을 바탕으로 작성하였습니다.<br>
<br>
<br>
<br>