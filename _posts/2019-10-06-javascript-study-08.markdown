---
layout: post
title:  "8. 함수정의"
date:   2019-10-06
categories: JavaScript
---  
자바스크립트에서 함수를 생성하는 방법은 총 3가지다.  
1. 함수 선언문  
2. 함수 표현식  
3. Function() 생성자 함수  
  
<br>
  
## 함수 리터럴  
자바스크립트에서는 함수도 일반 객체처럼 값으로 취급되기 때문에 객체 리터럴 방식으로 일반 객체를 생성할 수 있는 것 처럼, 함수 리터럴을 이용해 함수를 생성할 수 있다.  
실제로 함수 선언문이나 함수 표현식 방법 모두 함수 리터럴 방식으로 함수를 생성한다.  
  
```javascript

// 함수리터럴을 통한 add() 함수 정의

// 함수명은 선택사항으로 함수명이 없는 함수를 익명함수라고 한다.
function add(x,y){ // 매개변수는 타입을 기술하지 않음
	return x + y;
}

```
  
<br>
  
## 함수 선언문 방식으로 함수 생성하기  
함수 선언문 방식은 함수 리터럴 형태와 같음.  
함수 선언문 방식으로 정의된 함수의 경우 반드시 함수명이 정의되어 있어야 한다.  
  
**add() 함수 생성 (함수 선언문 방식)**  
```javascript

// add() 함수 선언문
function add(x,y){
	return x + y;
}

console.log(add(3,4));  // 7

```
함수 선언문 형태로 add() 함수를 구현한 코드로 함수명 add가 있고, 함수명으로 함수를 호출하고 있다.  
함수명 add로 호출하는것같지만, add()함수는 자바스크립트 엔진에 의해 다음과 같은 함수 표현식 형태로 변경된다.  
```javascript

var add = function add(x,y){
	return x + y ;
}

```
함수 이름과 함수 변수의 이름이 add로 같으므로, 함수 이름으로 함수가 호출되는것처럼 보이지만 실제로는 add 함수 변수로 함수 외부에서 호출이 가능하게 된것!  
  
<br>
  
## 함수 표현식 방식으로 함수 생성하기  
자바스크립트에서는 함수도 하나의 값처럼 취급된다.  
따라서 함수도 숫자나 문자열처럼 변수에 할당하는 것이 가능하다.  
이런 방식으로 함수 리터럴로 하나의 함수를 만들어서 변수에 할당하여 함수를 생성하는 것을 함수 표현식이라고 한다.  
함수 표현식 방식으로 함수를 정의할 때, 함수 끝에 세미콜론(;)을 반드시 붙이는걸 권장한다. 이와 관련된 자세한 내용이 궁금하다면 구글의 자바스크립트 스타일 가이드 참고~  
  
```javascript

// add() 함수 표현식, 함수명이 없으므로 익명 함수다.
/* 	add변수는 함수 리터럴로 생성한 함수를 참조하는 변수일뿐 함수 이름이 아니다. 
	add와 같이 함수가 할당된 변수를 함수변수라고 함 */
var add = function(x,y){
	return x + y;
}

// 함수변수 add는 함수의 참조값을 가지므로 또 다른 변수 plus에도 그 값을 그대로 할당 가능 
var plus = add;

console.log(add(3,4));	// 7
console.log(plus(3,4)); // 11

/* add 함수와 plus 함수 변수는 두개의 인자를 더하는 동일한 익명함수를 참조한다. */

```
함수 표현식은 함수 선언문 문법과 거의 유사하며 함수 표현식 방법에서 함수 이름은 선택사항이고 보통 사용하지 않는다.  
  
<br>
  
참고로 함수 이름이 포함된 함수 표현식을 기명 함수 표현식이라 한다.  
**기명 함수 표현식의 함수 호출 방법**
```javascript

var add = function sum(x,y){
	return x + y;
}

console.log(add(3,4)); // 7

/* 함수 표현식에서 사용된 함수 이름(sum)이 외부 코드에서 접근이 불가능하기 때문에 에러 발생 */
console.log(sum(3,4)); // Uncaught ReferenceError : sum is not defined 에러 발생

```
함수 표현식에 사용된 함수 이름은 정의된 함수 내부에서 해당 함수를 재귀적으로 호출하거나, 디버거 등에서 함수를 구분할 때 사용됨.  
따라서 외부에서 호출하면 sum() 함수 정의되어 있지 않다는 에러 발생. 외부에서 호출하려면 함수 변수 명으로 해당 함수를 호출해야함!  
  
<br>
  
  
## Function() 생성자 함수를 통한 함수 생성하기  
함수 선언문이나 함수 표현식 방식도 Function() 생성자 함수가 아닌 함수 리터럴 방식으로 함수를 생성하지만, 결국엔 이 또한 내부적으로 Function() 생성자 함수로 함수가 생성된다고 볼 수 있다.  
  
**Function() 생성자 함수를 이용한 add() 함수 생성**
```javascript

var add = new Function('x','y','return x + y');
console.log(add(3,4)); // 7

```
Function() 생성자 함수를 사용한 함수 생성 방법은 자주 사용되지 않으므로 상식 수준으로 알아두자.  
  
<br>
<br>
  
## 함수 호이스팅 
**함수 선언문 방식과 함수 호이스팅**
함수가 자신이 위치한 코드에 상관없이 함수 선언문 형태로 정의한 함수의 유효 범위는 코드의 맨 처음부터 시작한다는 것을 확인할 수 있다. 이것을 함수의 호이스팅이라고 한다.  
```javascript

// 이 시점에서 add() 함수가 정의되지 않았음에도 add() 함수를 호출하는것이 가능하다. 함수 호이스팅이 일어난것.
add(2,3); // 5


// 함수 선언문 형태로 add() 함수 정의 
function add(x,y) {
	return x + y;
}

add(3,4); // 7

```
더글라스 크락포드는 이러한 함수 호이스팅은 함수를 사용하기전에 반드시 선언해야한다는 규칙을 무시하므로 코드의 구조를 엉성하게 만들수도있다고 지적하며, 함수 표현식 사용을 권장한다.  
  
<br>
  
**함수 표현식 방식과 함수 호이스팅**  
함수 표현식 방법은 호이스팅이 일어나지 않는다.  
```javascript

// 함수 생성되기 전 호출 불가능
add(2,3); // uncaught type error

// 함수 표현식 형태로 add() 함수 정의
var add = function (x,y) {
	return x + y;
};

// 함수가 생성된 후에 호출 가능 
add(3,4); // 7

```
<br>
<br>
<br>
![img01]({{ site.baseurl }}/images/post/javascript/InsideJavascript.PNG)<br>
<br>
본 포스팅은 인사이드 자바스크립트 책을 공부한 내용을 바탕으로 작성하였습니다.<br>
<br>
<br>
<br>