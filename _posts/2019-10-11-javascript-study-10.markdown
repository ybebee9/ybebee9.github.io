---
layout: post
title:  "10. 함수의 다양한 형태"
date:   2019-10-11
categories: JavaScript
---  
  
## 콜백함수  
---  
익명함수의 대표적인 용도가 바로 콜백함수다.  
콜백함수는 코드를 통해 명시적으로 호출하는 함수가 아니라 개발자는 단지 함수를 등록하기만 하고,  
어떤 이벤트가 발생했거나 특정 시점에 도달했을 때 시스템에서 호출되는 함수를 말한다.

또한 특정 함수의 인자로 넘겨서 코드 내부에서 호출되는 함수 또한 콜백함수가 될 수 있다.  
대표적인 콜백 함수의 사용 예가 자바스크립트에서의 이벤트 핸들러 처리다.  
  
**window.onload 이벤트 핸들러 예제 코드**  
```javascript

// 페이지 로드시 호출될 콜백 함수
// window.onload 이벤트 핸들러를 익명 함수로 연결했다. 따라서 익명 함수가 콜백 함수로 등록된 것.
window.onload = function(){
	alert('This is the callback function');
};

```  
  
<br>
  
## 즉시 실행 함수  
---  
함수를 정의함과 동시에 바로 실행하는 함수를 즉시 실행 함수(immediate functions)라고 한다.  
이 함수도 익명 함수를 응용한 형태이다.  
  
**즉시 실행 함수 예제 코드**  
```javascript

/* 	즉시실행 함수 만드는 방법	: 함수 리터럴을 괄호()로 둘러싼다. 이때 함수 이름이 있든 없든 상관 없다.*/

(function (name) {
	console.log('This is the immediate function -->' + name);
})('foo'); // ('foo')로 즉시 실행 함수를 호출했으며, 이때 'foo'를 인자로 넘겼다. 이 값은 name 매개변수로 넘겨지게 된다.

```  
이렇게 함수가 선언되자마자 실행되게 만든 즉시 실행 함수의 경우, 같은 함수를 다시 호출할 수 없다.  
따라서 즉시 실행 함수의 이러한 특징을 이용하여 최초 한번의 실행만을 필요로 하는 초기화 코드 부분 등에 사용할 수 있다.  
  
즉시 실행 함수의 또 다른 용도는 jQuery와 같은 자바스크립트 라이브러리나 프레임워크 소스들에서 사용된다는 것이다.  
jQuery의 소스코드를 보면 소스의 시작부분과 끝 부분이 즉시 실행 함수 형태로 구성되어있음을 확인할 수 있다.  
  
**jQuery에서 사용된 즉시 실행 함수**  
```javascript

(function(window,undefined){
	...
})(window);

```  
jQuery에서 즉시 실행 함수를 사용하는 이유는 자바스크립트의 변수 유효 범위 특성 때문이다.  
함수 외부의 코드에서 함수 내부의 변수를 액세스하는 게 불가능하다.  
따라서 즉시 실행 함수 내에 라이브러리 코드를 추가하면 전역 네임스페이스를 더럽히지 않으므로, 이후 다른 자바스크립트 라이브러리들이 동시에 로드가 되더라도 라이브러리 간 변수 이름 충돌 같은 문제를 방지할 수 있다.  
  
라이브러리 코드가 처음 로드되어 초기화될 때, 즉시 실행 함수 패턴이 많이 사용됨을 기억하자.  
  
<br>
  
## 내부함수  
---  
자바스크립트에서는 함수 코드 내부에서도 다시 함수 정의가 가능하다.  
이렇게 함수 내부에 정의된 함수를 내부 함수(inner function)라고 부른다.  
  
내부함수는 클로저를 생성하거나 부모 함수 코드에서 외부에서의 접근을 막고 독립적인 헬퍼 함수를 구현하는 용도 등으로 사용한다.  
  
**내부 함수 예제 코드**  
```javascript

// parent() 함수 정의
function parent() {
	var a = 100;
	var b = 200;

	// child() 내부 함수 정의 
	function child() {
		
		var b = 300;
		
		/* 	내부함수에서는 자신을 둘러 싼 부모 함수의 변수에 접근이 가능하다. 
			자바스크립트 스코프 체이닝 때문에 함수 내부에서는 함수 밖에서 선언된 변수나 함수의 접근이 가능하다. */
		console.log(a);
		// b는 child() 함수에 선언이 되어있으므로 parent() 함수의 b 변수가 아닌 child() 함수의 변수 b 값이 출력됨.
		console.log(b);
	}

	child();
}

parent(); // 100 300 출력

/* 	내부함수는 일반적으로 자신이 정의된 부모 함수 내부에서만 호출이 가능하다.
	기본적으로 함수 스코프 밖에서는 함수 스코프 안에 선언된 모든 변수나 함수에 접근이 불가능하다.
	parent()함수 외부에서 parent()함수 스코프 안에 있는 child() 함수를 호출하려 했으므로 에러가 발생한것이다.  */
child(); // Uncaught ReferenceError : child is not defined

```  
But, 함수 외부에서도 특정 함수 스코프 안에 선언된 내부 함수를 호출할 수 있다.  
부모 함수에서 내부 함수를 외부로 리턴하면, 부모 함수 밖에서도 내부 함수를 호출하는것이 가능하다.  
  
**함수 스코프 외부에서 내부 함수 호출하는 예제 코드**  
```javascript

function parent() {
	var a = 100;

	// child() 내부 함수
	var child = function () {
		console.log(a);
	}

	// child()함수 반환
	return child();
}

var inner = parent();

/*	inner변수에 함수 호출 연산자 ()를 붙여 함수 호출 구문을 만들면,
	parent() 함수 스코프 밖에서도 내부 함수 child()가 호출된다.
	호출하는 내부 함수에는 a 변수가 정의되어있지 않아, 스코프 체이닝으로 부모 함수에 a변수가 정의되어 있는지 확인하게되고,
	a가 정의되어 있으면 그 값이 그대로 출력된다.
*/
inner(); // 출력값 100

```
  
<br>
  
## 함수를 리턴하는 함수
자바스크립트에서는 함수도 일급 객체이므로 일반 값처럼 함수 자체를 리턴할 수도 있다.  
이러한 특징은 다양한 활용이 가능하며 함수를 호출함과 동시에 다른 함수로 바꾸거나,  
자기 자신을 재 정의하는 함수를 구현할 수 있다.  
  
**자신을 재정의 하는 함수 예제 코드**  
```javascript

// self() 함수
var self = function () {
	console.log('a');

	return function () {
		console.log('b');
	}
}

self = self(); // a
self(); // b

```
<br>
<br>
<br>
<br>
<br>
  
**Ref**  
---  
인사이드 자바스크립트
