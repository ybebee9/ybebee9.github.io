---
layout: post
title:  "3.1 테이블 액세스 최소화"
date:   2019-08-23
categories: SQL튜닝
---  
## 3.1.1 테이블 랜덤 액세스
---
### ROW ID는 물리적주소? 논리적 주소?
인덱스를 스캔하는 이유는 ROW ID를 얻으려는데 있음.  
인덱스 ROW ID는 논리적 구조다. 디스크상에서 테이블 레코드를 찾아가기 위한 위치정보를 담는다.  
<br>
### 메인 메모리 DB와 비교
메인 메모리 DB는 데이터를 모두 메모리에 로드해놓고 메모리를 통해서만 I/O를 수행하는 DB다.  
버퍼캐시율이 99%이상인 잘 튜닝된 데이터베이스 시스템(디스크를 경유하지 않고 대부분 데이터를 메모리에서 읽는다는 뜻)이라도 메인 메모리 DB만큼은 빠르지 않다.  
<br>
### I/O 메커니즘 복습
DBA는 디스크상에서 블록을 찾기위한 주소 정보 또는 디스크상에서 테이블 레코드를 찾아가기 위한 논리적인 주소정보.  
매번 디스크에서 블록을 읽을 수 없으니 I/O 성능을 높이려면 버퍼캐시를 활용해야함.  
해싱 알고리즘으로 버퍼 헤더를 찾고, 거기서 얻은 포인터로 버퍼 블록을 찾아감.  
<br>
### 인덱스 ROWID는 우편주소
디스크 DB가 사용하는 ROWID = 우편주소.  
메인 메모리 DB가 사용하는 포인터 = 전화번호.  
'ROWID에 의한 데이터 테이블 액세스'는 매우 고비용 연산임.  
부가설명은 책에서 확인하기..!  
<br>
<br>
<br>
## 3.1.2 인덱스 클러스터링 팩터
---
클러스터링 팩터는 특정 컬럼을 기준으로 같은 값을 갖는 데이터가 서로 모여있는 정도를 의미한다.  
인덱스 클러스터링 팩터가 가장 좋은 상태는 인덱스 레코드 정렬순서와 테이블 레코드 정렬순서가 100% 일치하는 상태.  
CF가 좋은 컬럼에 생성한 인덱스는 검색 효율이 좋다(=테이블 액세스량에 비해 블록 I/O가 적게 발생함을 의미).  
<br>
<br>
<br>
<br>
![img01]({{ site.baseurl }}/images/post/sqlTuning/book/bookCover.PNG)<br>
<br>
본 포스팅은 친절한 SQL 튜닝 온라인 스터디를 진행하면서 공부한 내용을 바탕으로 작성하였습니다.<br>
<br>
<br>
<br>