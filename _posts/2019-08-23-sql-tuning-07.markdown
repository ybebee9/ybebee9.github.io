---
layout: post
title:  "3.1 테이블 액세스 최소화"
date:   2019-08-23
categories: SQL튜닝
---  
## 3.1.1 테이블 랜덤 액세스
---
### ROW ID는 물리적주소? 논리적 주소?
인덱스를 스캔하는 이유는 ROW ID를 얻으려는데 있음.  
인덱스 ROW ID는 논리적 구조다. 디스크상에서 테이블 레코드를 찾아가기 위한 위치정보를 담는다.  
<br>
### 메인 메모리 DB와 비교
메인 메모리 DB는 데이터를 모두 메모리에 로드해놓고 메모리를 통해서만 I/O를 수행하는 DB다.  
버퍼캐시율이 99%이상인 잘 튜닝된 데이터베이스 시스템(디스크를 경유하지 않고 대부분 데이터를 메모리에서 읽는다는 뜻)이라도 메인 메모리 DB만큼은 빠르지 않다.  
<br>
### I/O 메커니즘 복습
DBA는 디스크상에서 블록을 찾기위한 주소 정보 또는 디스크상에서 테이블 레코드를 찾아가기 위한 논리적인 주소정보.  
매번 디스크에서 블록을 읽을 수 없으니 I/O 성능을 높이려면 버퍼캐시를 활용해야함.  
해싱 알고리즘으로 버퍼 헤더를 찾고, 거기서 얻은 포인터로 버퍼 블록을 찾아감.  
<br>
### 인덱스 ROWID는 우편주소
디스크 DB가 사용하는 ROWID = 우편주소.  
메인 메모리 DB가 사용하는 포인터 = 전화번호.  
'ROWID에 의한 데이터 테이블 액세스'는 매우 고비용 연산임.  
부가설명은 책에서 확인하기..!  
<br>
<br>
<br>
## 3.1.2 인덱스 클러스터링 팩터
---
클러스터링 팩터는 특정 컬럼을 기준으로 같은 값을 갖는 데이터가 서로 모여있는 정도를 의미한다.  
인덱스 클러스터링 팩터가 가장 좋은 상태는 인덱스 레코드 정렬순서와 테이블 레코드 정렬순서가 100% 일치하는 상태.  
CF가 좋은 컬럼에 생성한 인덱스는 검색 효율이 좋다(=테이블 액세스량에 비해 블록 I/O가 적게 발생함을 의미).  
<br>
<br>
<br>  
## 3.1.3 인덱스 손익분기점
---
Index Range Scan에 의한 테이블 액세스가 Table Full Scan보다 느려지는 지점을 '인덱스 손익분기점'이라고 부른다.  
Table Full Scan은 성능이 일정하다. 몇건을 조회하든 차이가 거의 없다.  
인덱스를 이용해 테이블 액세스할때는 전체건중에 몇건을 추출하느냐에 따라 성능이 크게 달라진다.  
**인덱스를 이용한 테이블 액세스가 Table Full Scan보다 느려지는 두가지 요인**  
> 랜덤 액세스 방식  
> Single Block I/O 방식  

<br>
<br>
<br>  
## 3.1.4 인덱스 컬럼 추가
---
테이블 액세스 최소화를 위해 가장 일반적으로 사용하는 튜닝 기법은 인덱스에 컬럼을 추가하는것.  
기존 인덱스에 컬럼을 추가하는것만으로 큰 효과를 얻을수 있다.  
인덱스 스캔량은 줄지않지만, 테이블 랜덤 액세스 횟수를 줄여주기 때문이다.  
<br>
<br>
<br>
## 3.1.5 인덱스만 읽고 처리 
---
인덱스만 읽어서 처리하는 쿼리를 'Covered 쿼리'라고 부르며, 그 쿼리에서 사용한 인덱스를 'Covered 인덱스'라고 부른다.  
<br>
### include 인덱스
순전히 테이블 랜덤 액세스를 줄이는 용도로 개발됐다.  
<br>
<br>
<br>
## 3.1.6 인덱스 구조 테이블
---
테이블을 찾아가기 위한 ROWID를 갖는 일반 인덱스와 달리 IOT는 그 자리에 테이블 데이터를 갖는다.  
즉, 테이블 블록에 있어야 할 데이터를 인덱스 리프 블록에 모두 저장하고 있다.  
IOT는 인위적으로 클러스터링 팩터를 좋게 만드는 방법 중 하나다.  
랜덤액세스가 아닌 시퀀셜 방식으로 데이터를 액세스한다.  
<br>
<br>
<br>
## 3.1.7 클러스터 테이블
---
### 인덱스 클러스터 테이블
클러스터 키 값이 같은 레코드를 한 블록에 모아서 저장하는 구조.  
한 블록에 모두 담을 수 없을 경우 새로운 블록을 할당해 클러스터 체인으로 연결.  
클러스터에 도달해서는 시퀀셜 방식으로 스캔하기 때문에 넓은 범위를 읽더라도 비효율이 없다는게 핵심원리.  
오라클 클러스터는 키 값이 같은 데이터를 같은 공간에 저장할 뿐, IOT나 클러스터형 인덱스 처럼 정렬하지는 않음.  
클러스터 테이블을 구성하는 방법(클러스터 생성 > 클러스터 인덱스 정의 > 클러스터 테이블 생성)은 책 참고..  
<br>
### 해시 클러스터 테이블
해시 클러스터는 인덱스를 사용하지 않고 해시 알고리즘을 사용해 클러스터를 찾아간다.  
클러스터 테이블을 구성하는 방법(클러스터 생성 > 클러스터 테이블 생성)은 책 참고..  
<br>
<br>
<br>
<br>
![img01]({{ site.baseurl }}/images/post/sqlTuning/book/bookCover.PNG)<br>
<br>
본 포스팅은 친절한 SQL 튜닝 온라인 스터디를 진행하면서 공부한 내용을 바탕으로 작성하였습니다.<br>
<br>
<br>
<br>